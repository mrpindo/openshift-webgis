<!DOCTYPE html>
<html>
<head>
	<title>Buat daftar Masakan Padang favorit anda!</title>
	<meta charset="utf-8">
        <link rel="shortcut icon" href="{{ STATIC_URL }}endikimg/dckLogo.jpg"> 
	<link rel="stylesheet" href="{{ STATIC_URL }}leaflet-0.7/leaflet.css" />
	<link rel="stylesheet" href="{{ STATIC_URL }}leaflet-0.7/leaflet.draw.css" />   
	
	<!--[if lte IE 8]>
		<link rel="stylesheet" href="lib/leaflet/leaflet.ie.css" />
		<link rel="stylesheet" href="leaflet.draw.ie.css" />
	<![endif]-->
	
<style>

.leaflet-draw-toolbar a {
	background-image: url('{{ STATIC_URL }}leaflet-0.7/images/spritesheet.png');
	background-repeat: no-repeat;
}

.leaflet-retina .leaflet-draw-toolbar a {
	background-image: url('{{ STATIC_URL }}leaflet-0.7/images/spritesheet-2x.png');
	background-size: 210px 30px;
}

</style>
	<script src="{{ STATIC_URL }}leaflet-0.7/jquery.js"></script>
	<script src="{{ STATIC_URL }}leaflet-0.7/leaflet.js"></script>
	<script src="{{ STATIC_URL }}leaflet-0.7/leaflet.draw.js"></script>  
	<script src="{{ STATIC_URL }}leaflet-0.7/data/samplemarkers.js"></script> 

</head>
<body>
	<div id="map" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></div>
	
	<script>
	
var map = L.map('map', {
	center: [-3.04578, 118.16895],
	zoom: 5, 
        minZoom: 4,
        //maxZoom: 18,
	});

//-- setup zoom tool ---------------------------------------------
//L.control.scale().addTo(map);  			//shows both km and mi
L.control.scale({imperial: false}).addTo(map);		//shows only km, since {metric: true} is default

var indonesia = [{{ qs|safe }}];

L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
	maxZoom: 18,
	attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
	}).addTo(map);


var MyCustomMarker = L.Icon.extend({
    options: {
        shadowUrl: null,
        //iconAnchor: new L.Point(12, 12),
        //iconSize: new L.Point(24, 24),
        iconUrl: '{{ STATIC_URL }}leaflet-0.7/images/plus.png'
    }
})

	
geojson = L.geoJson(indonesia, {
	style: style,
//	onEachFeature: onEachFeature
}).addTo(map);		//map added, checkbox on
//});			//map added, checkbox off

geojson2 = L.geoJson(sampleMarkers, {
	style: style,
   	onEachFeature: function (feature, layer) {
		//alert(JSON.stringify(feature.properties));		//Works!
        	layer.bindPopup(feature.properties.namo);
    	}
});			//map added, checkbox off

//var drawnItems = new L.FeatureGroup();
var drawnItems = geojson2;
map.addLayer(drawnItems);

L.drawLocal.draw.toolbar.buttons.marker = 'Buat Marker';		
L.drawLocal.draw.handlers.marker.tooltip.start = 'Klik untuk menempatkan marker...';
L.drawLocal.edit.toolbar.buttons.edit = 'Edit Marker';		
L.drawLocal.edit.toolbar.buttons.remove = 'Hapus Marker';	

var drawControl = new L.Control.Draw({
			position: 'topright',
			draw: {
				polygon: false,
				polyline: false,
				circle: false,
				rectangle: false,
                                //marker: true
        			marker: {
            				//icon: new MyCustomMarker()		//Works!
					//find out what properties applied to this damn marker!

        			}

			},
			edit: {
				featureGroup: drawnItems
			}
});
map.addControl(drawControl);


map.on('draw:created', function (e) {
	var type = e.layerType, 
		layer = e.layer; 

	if (type === 'marker') {
 
			var locName = 'RancakBana';
			customMarker = L.Marker.extend({
				"feature":{"type":"Feature","properties":{"namo":locName},
					"geometry":{"type":"Point","coordinates":			
					[106.85302734374999,-6.206090498573885]}}
			});

			var jsonlayer = new customMarker(e.layer.getLatLng());

			//layer2.push(feature.properties["ID"] = "A");

				//alert(JSON.stringify(e.layer));
				////alert(JSON.stringify(layer2));
				//alert(JSON.stringify(e.layer.toGeoJSON()));
				//alert(layer.getLatLng());	//Works!
				//var popupContent = feature.properties.namo;	//OK

				var popupContent = locName;	//Works

				jsonlayer.bindPopup(popupContent,{
        			//	closeButton: true,
        			//	minWidth: 320
    				});


	console.log(JSON.stringify(jsonlayer.toGeoJSON()));
	}

// Do whatever else you need to. (save to db, add to map etc)  //This is the tipping point!
drawnItems.addLayer(jsonlayer);

});

//Following draw:edited can be hidden to perform default action.
map.on('draw:edited', function (e) {
			var layers = e.layers;
			var countOfEditedLayers = 0;
			layers.eachLayer(function(layer) {
				countOfEditedLayers++;
			});
console.log("Edited " + countOfEditedLayers + " layers");
});



function style(feature) {
	return {
		weight: 2,
		opacity: 1,
		color: 'white',
		dashArray: '3',
		fillOpacity: 0.4,	//default fillOpacity: 0.7
		fillColor: '#FFEDA0'
	};
}




var overlays = {

	"Sample Markers": geojson2      
};
var baseLayers = {
	"Indonesia": geojson
};

L.control.layers(baseLayers, overlays, {
	collapsed: false
}).addTo(map);	



function jsonlist() {
	alert(JSON.stringify(drawnItems.toGeoJSON()));		//Works great!
	};

var CheckButton = L.Control.extend({
  options: {
    position: 'topleft',
    autoZIndex: true
  },
  initialize: function (options) {
    L.setOptions(this, options);
  },
  onAdd: function (map) {
    var container = L.DomUtil.create('div', 'leaflet-control-options');
    $(container).html('<button type="button" class="btn-mini btn-primary" onclick=jsonlist();>CheckGeoJSON</button>');
    L.DomEvent
      .addListener(container, 'click', L.DomEvent.stopPropagation)
      .addListener(container, 'click', L.DomEvent.preventDefault);
    return container;
  }
});
map.addControl(new CheckButton());


	</script>
</body>
</html>
