<!DOCTYPE html>
<html>
<head>

        <title>Map Indonesia</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="{{ STATIC_URL }}leaflet-0.6.4/leaflet.css" />

<style>
#map {
	width: 100%;
	height: 500px;
}

.info {
	padding: 6px 8px;
	font: 14px/16px Arial, Helvetica, sans-serif;
	background: white;
	background: rgba(255,255,255,0.8);
	box-shadow: 0 0 15px rgba(0,0,0,0.2);
	border-radius: 5px;
}
.info h4 {
	margin: 0 0 5px;
	color: #777;
}

.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
</style>

</head>
<body>

<div id="map"></div>

<script src="{{ STATIC_URL }}leaflet-0.6.4/leaflet.js"></script>
<script>

var map = L.map('map', {
	center: [-3.04578, 118.16895],
	zoom: 5, 
	});

var indonesia = [{{ qs|safe }}];

L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
	maxZoom: 18,
	attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
	}).addTo(map);


var popup = L.popup();

function onMapClick(e) {
	popup
		.setLatLng(e.latlng)
		.setContent("You clicked the map at " + e.latlng.toString())
		.openOn(map);
}

map.on('click', onMapClick);

// control that shows state info on hover
var info = L.control();

info.onAdd = function (map) {
	this._div = L.DomUtil.create('div', 'info');
	this.update();
	return this._div;
};

info.update = function (props) {
	this._div.innerHTML = '<h4>Jumlah POIs tiap propinsi</h4>' +  (props ?
		'<b>' + props.PROPINSI + '</b><br />' + props.COUNT + ' POIs '
		: 'Hover over Propinsi');
};

info.addTo(map);

// get color depending on population density value
function getColor(d) {
	return d > 5000 ? '#800026' :
	       d > 4000  ? '#BD0026' :
	       d > 3000  ? '#E31A1C' :
	       d > 2000  ? '#FC4E2A' :
	       d > 1000  ? '#FD8D3C' :
	       d > 500   ? '#FEB24C' :
	       d > 100   ? '#FED976' :
	                  '#FFEDA0';
}

function style(feature) {
	return {
		weight: 2,
		opacity: 1,
		color: 'white',
		dashArray: '3',
		fillOpacity: 0.7,
		fillColor: getColor(feature.properties.COUNT)
	};
}

function highlightFeature(e) {
	var layer = e.target;
	layer.setStyle({
		weight: 5,
		color: '#666',
		dashArray: '',
		fillOpacity: 0.7
	});

	if (!L.Browser.ie && !L.Browser.opera) {
		layer.bringToFront();
	}

	info.update(layer.feature.properties);
}



var geojson;

function resetHighlight(e) {
	geojson.resetStyle(e.target);
	info.update();
}

function zoomToFeature(e) {
	map.fitBounds(e.target.getBounds());
}

function onEachFeature(feature, layer) {
	layer.on({
		mouseover: highlightFeature,
		mouseout: resetHighlight,
		click: zoomToFeature
	});
}


geojson = L.geoJson(indonesia, {
	style: style,
	onEachFeature: onEachFeature
}).addTo(map);		//map added, checkbox on
//});			//map added, checkbox off

var overlays = {
	"Indonesia": geojson   
};
var baseLayers = {

};

L.control.layers(baseLayers, overlays).addTo(map);

var legend = L.control({position: 'bottomright'});

legend.onAdd = function (map) {
	var div = L.DomUtil.create('div', 'info legend'),
		grades = [0, 100, 500, 1000, 2000, 3000, 4000, 5000],
		labels = [],
		from, to;

	for (var i = 0; i < grades.length; i++) {
		from = grades[i];
		to = grades[i + 1];

		labels.push(
			'<i style="background:' + getColor(from + 1) + '"></i> ' +
			from + (to ? '&ndash;' + to : '+'));
	}

	div.innerHTML = labels.join('<br>');
	return div;
};

legend.addTo(map);

	</script>

</body>
</html>

